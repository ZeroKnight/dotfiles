priority 40
extends c

priority 50

global !p
def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]
endglobal

snippet cl "class"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/}($2);
	virtual ~${1/(\w+).*/$1/}();

private:
	$0
};
endsnippet

snippet method "Class method definition" b
${1:void} ${2:`!p snip.rv = snip.basename or "name"`}::${3:func}($4)
{
	${VISUAL}$0
}
endsnippet

snippet cmethod "Class const method definition" b
${1:void} ${2:`!p snip.rv = snip.basename or "name"`}::${3:func}($4) const
{
	${VISUAL}$0
}
endsnippet

snippet ns "namespace"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet cout "std::cout << ..."
std::cout << $0
endsnippet

snippet coutl "std::cout << ... << std::endl;"
std::cout << $1 << std::endl;$0
endsnippet

snippet cin "std::cin >> ..."
std::cin >> $0
endsnippet

snippet endl "std::endl"
std::endl
endsnippet

snippet map "std::map"
std::map<${1:key}, ${2:value}> ${0:map};
endsnippet

snippet vec "std::vector"
std::vector<${1:int}> ${0:v};
endsnippet

snippet begend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet tp "template <typename ..>"
template <typename $1>
endsnippet

snippet fnc "Basic C++ Doxygen function template" b
/**
* @brief: $4
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:void} $2($3)
{
	$0
}
endsnippet

# vim: ft=snippets noet ts=4
