# Various shortcuts and typing time-savers

priority 50

snippet hash "Hash definition"
my %${1:hash} = (
	$2
);
endsnippet

snippet hashr "Hashref definition"
my $${1:hashref} = {
	$2
};
endsnippet

snippet pair "Key/Value pair; foo => bar"
${1:key} => ${2:value},$0
endsnippet

snippet pairh "Key/Value pair with hashref value"
${1:key} => {
	$2
},
endsnippet

snippet paira "Key/Value pair with arrayref value"
${1:key} => [
	$2
],
endsnippet

### Testing ####################################################

snippet subtest "subtest 'foo' => sub {}"
subtest '$1' => sub {
	${VISUAL}$0
};
endsnippet

snippet is "is(foo, 42, 'foo is 42')"
is($1, $2, '$3');$0
endsnippet

snippet isnt "isnt(foo, 42, 'foo is not 42')"
is($1, $2, '$3');$0
endsnippet

snippet isd "is_deeply($got, $expected, $test_name)"
is_deeply($1, $2, '$3');$0
endsnippet

snippet like "like(foo, qr/bar/, 'foo matches bar')"
like($1, qr/$2/, '$3');$0
endsnippet

snippet unlike "unlike(foo, qr/bar/, 'foo does not match bar')"
like($1, qr/$2/, '$3');$0
endsnippet

snippet ok "ok(foo, 'foo ok')"
ok($1, '$2');$0
endsnippet

snippet newok "new_ok('Foo::Bar' => [])"
new_ok('$1' => ${2:[]});$0
endsnippet

snippet cmpok "cmp_ok(foo, '>=', bar, 'foo >= bar')"
cmp_ok($1, '${2:&&}', $3, '$4');$0
endsnippet

snippet canok "can_ok('Foo::Bar', qw/frobnicate bing fling/)"
can_ok('$1', qw/$2/);$0
endsnippet

snippet isaok "isa_ok($obj, 'Foo::Obj', 'Foo object')"
isa_ok($1, '$2'${3/.+/, /}${3:name});$0
endsnippet

snippet reqok "require_ok(module/file)"
require_ok('$1');$0
endsnippet

snippet useok "use_ok('Foo::Bar', qw/imports/)" b
BEGIN { use_ok('$1'${3/\S+/, qw\//}${3:imports}${3/\S+/\//}) }
$0
endsnippet

snippet expl "diag explain $obj"
diag explain $1;$0
endsnippet

### Idioms and Shortcuts #######################################

snippet open "open my $fh ..."
open my $${3:fh}, '<', ${1:$fn} or die "\$0: can't open ${1/^(\$).*/(?1:')$0(?1:')/} for reading: $!";
endsnippet

snippet slurp "slurp"
my $${1:var} = do { local $/; open my $fh, '<', ${2:$file}; <$fh> };
endsnippet

snippet readf "Read file into array"
open my $${3:fh}, '<', ${1:$fn} or die "\$0: can't open ${1/^(\$).*/(?1:')$0(?1:')/} for reading: $!";
chomp(my @${2:lines} = <$$3>);
close $$3;$0
endsnippet

snippet inlist "unless grep { $_ eq $foo } @bar"
${1:unless} (grep { $_ eq $${2:foo} } ${3/(\S+)(\s)?/(?2:qw\(:@)/}${3:bar}${3/(\S+)(\s)?/(?2:\))/})
{
	${VISUAL}$0
}
endsnippet

snippet inlistx "... unless grep { $_ eq $foo } @bar"
${1:unless} grep { $_ eq $${2:foo} } ${3/(\S+)(\s)?.*/(?2:qw\(:@)/}${3:bar}${3/(\S+)(\s)?.*/(?2:\);)/}
endsnippet

# vim: ft=snippets ts=4
