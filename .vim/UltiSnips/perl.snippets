priority -50

### Assorted Boilerplate #######################################

snippet #! "shebang" b
`!p snip.rv = '#!/usr/bin/env perl'`

$0
endsnippet

snippet sw "use strict; use warnings;" b
use strict;
use warnings;

$0
endsnippet

snippet sw5 "use v5.14; use warnings;" b
use v5.14;
use warnings;

$0
endsnippet

snippet use "use ..." b
use ${1:Foo::Bar};
endsnippet

snippet noex "no warnings 'experimental::foo'"
no warnings 'experimental::$1';
endsnippet

snippet pack "package Foo::Bar ..." b
package ${1:`!v expand('%:.:gs?/?::?:h')`}::${2:`!v expand('%:t:r')`};

$0

1;
endsnippet

snippet version "our $VERSION ..." b
our $VERSION = "${1:0.001}";
$VERSION = eval $VERSION;

$0
endsnippet

snippet export "use Exporter qw(import) ..." b
use Exporter qw(import);
our @EXPORT    = qw($2);
our @EXPORT_OK = qw($1);

$0
endsnippet

snippet module "New Module boilerplate" b
package ${1:Foo::Bar};

use ${2:strict};
use warnings;

our $VERSION = "${3:0.001}";
$VERSION = eval $VERSION;

use Exporter qw(import);
our @EXPORT    = qw($5);
our @EXPORT_OK = qw($4);

$0

$1;
endsnippet

snippet moose "use Moose; ..." b
use Moose;
$0

no Moose;
__PACKAGE__->meta->make_immutable;
endsnippet

### Branch Statements and Loops ################################

snippet if "if ..."
if ($1)
{
	${0:${VISUAL}}
}
endsnippet

snippet ifx "if (modifier)"
${1:expr} if $2;
endsnippet

snippet el "else ..."
else
{
	${0:${VISUAL}}
}
endsnippet

snippet eli "elsif ..."
elsif ($1)
{
	${0:${VISUAL}}
}
endsnippet

snippet ife "if .. else"
if ($1)
{
	$2
}
else
{
	$3
}
endsnippet

snippet ifei "if .. elsif"
if ($1)
{
	$2
}
elsif ($3)
{
	$4
}
endsnippet

snippet ifee "if..elsif..else"
if ($1)
{
	$2
}
elsif ($3)
{
	$4
}
else
{
	$5
}
endsnippet

snippet unl "unless"
unless ($1)
{
	${0:${VISUAL}}
}
endsnippet

snippet unlx "unless (modifier)"
${1:expr} unless $2;
endsnippet

snippet wh "while"
while ($1)
{
	${0:${VISUAL}}
}
endsnippet

snippet whx "while (modifier)"
${1:expr} while $2;
endsnippet

snippet until "until"
until ($1)
{
	${0:${VISUAL}}
}
endsnippet

snippet xuntil "until (modifier)"
${1:expr} until $2;
endsnippet

snippet for "foreach"
foreach ${1:my $${2:i}} (${3:list})
{
	${0:${VISUAL}}
}
endsnippet

snippet forx "foreach (modifier)"
${1:expr} foreach ${2:list};
endsnippet

snippet forc "for (C-style)"
for (my $${1:i} = ${2:0}; $$1 < ${3:expr}; ++$$1)
{
	${0:${VISUAL}}
}
endsnippet

snippet given "given"
given ($1)
{
	${0:${VISUAL}}
}
endsnippet

snippet when "when"
when ($1)
{
	${0:${VISUAL}}
}
endsnippet

snippet whenx "when (modifier)"
${1:expr} when $2;
endsnippet

### Function/Object Constructs #################################

snippet sub "Subroutine (function)" b
sub ${1:sub_name}
{
	my ${2/([^,])+(,)?.*/(?2:\()/}${2:\$foo}${2/([^,])+(,)?.*/(?2:\))/} = ${2/([^,])+(,)?.*/(?2:@_:shift)/};
	$0
}
endsnippet

snippet new "sub new { ... }" b
sub new
{
	my $class = shift;
	my $self = bless {$1}, $class;
	return $self;
}
endsnippet

snippet has "Moose attribute (has ...)"
has '${1:attr}' => (
	is  => '${2:rw}',
	isa => '${3:Any}',
	${4:default => }$0
);
endsnippet

snippet method "Class method: sub foo { my $self = shift; ..." b
sub ${1:method_name}
{
	my $self = shift;
	my ${2/([^,])+(,)?.*/(?2:\()/}${2:\$foo}${2/([^,])+(,)?.*/(?2:\))/} = ${2/([^,])+(,)?.*/(?2:@_:shift)/};

	$0
}
endsnippet

### Idioms and Shortcuts #######################################

snippet slurp "slurp"
my $${1:var} = do { local $/; open my $fh, '<', ${2:$file}; <$fh> };
endsnippet

snippet readf "Read file into array"
open my $${3:fh}, '<', ${1:$fn} or die "\$0: can't open ${1/^(\$).*/(?1:')$0(?1:')/} for reading: $!";
chomp(my @${2:lines} = <$$3>);
close $$3;$0
endsnippet

snippet inlist "unless grep { $_ eq $foo } @bar"
${1:unless} (grep { $_ eq $${2:foo} } ${3/(\S+)(\s)?/(?2:qw\(:@)/}${3:bar}${3/(\S+)(\s)?/(?2:\))/})
{
	$0
}
endsnippet

snippet xinlist "... unless grep { $_ eq $foo } @bar"
${1:unless} grep { $_ eq $${2:foo} } ${3/(\S+)(\s)?.*/(?2:qw\(:@)/}${3:bar}${3/(\S+)(\s)?.*/(?2:\);)/}
endsnippet

snippet hash "Hash definition"
my %${1:hash} = (
	$2
);
endsnippet

snippet hashr "Hashref definition"
my $${1:hashref} = {
	$2
};
endsnippet

snippet pair "Key/Value pair; foo => bar"
${1:key} => ${2:value},$0
endsnippet

snippet pairh "Key/Value pair with hashref value"
${1:key} => {
	$2
},
endsnippet

snippet paira "Key/Value pair with arrayref value"
${1:key} => [
	$2
],
endsnippet

# vim:ft=snippets:
