-- Startup Screen Configuration

local format = string.format

local logo = {
  '‚†ô‚£è‚†©‚†â‚†ç‚†π‚£á‚†Ä‚¢∏‚°ã‚†©‚†â‚†ç‚¢π‚°á‚£†‚†û‚†â‚†ç‚†©‚†â‚†ç‚†©‚†â‚†ç‚°â‚†ª‚£§‚†Ä‚£†‚†û‚°â‚†ç‚†©‚†â‚†ç‚†©‚†â‚†ç‚°â‚†ª‚¢¶‚¢®‚°è‚¢â‚†ç‚†©‚†â‚£Ø‚†Ä‚†Ä‚°Ø‚†â‚†ç‚†©‚¢ô‚£ó‚°è‚†©‚†â‚†ç‚°â‚£ü‚¢ª‚°ç‚†©‚†â‚†ç‚†π‚£Ü‚†Ä‚†Ä‚†Ä‚£º‚†â‚†ç‚†©‚¢â‚¢π‚°è',
  '‚†Ä‚°ó‚††‚¢Å‚†ä‚†Ñ‚¢ª‚°Ñ‚¢∏‚°É‚†®‚†à‚†å‚¢∏‚£ü‚°á‚††‚†°‚†Å‚†Ö‚°Å‚†Ö‚†°‚†Å‚†Ö‚†Ñ‚†°‚¢∏‚£ü‚°á‚¢ê‚††‚†®‚†à‚†å‚°à‚†å‚†®‚†ê‚††‚†°‚¢∏‚£ó‚°á‚¢ê‚†à‚†Ñ‚†Ö‚°∑‚†Ä‚†Ä‚°Ø‚†à‚†å‚†®‚¢ê‚£ó‚°á‚†°‚¢Å‚†°‚†Ä‚£ø‚¢∏‚°á‚†à‚†å‚†®‚††‚†π‚°Ü‚†Ä‚£∏‚¢É‚†®‚¢à‚†®‚¢Ä‚¢∏ ',
  '‚†Ä‚°Ø‚†ê‚°ê‚¢à‚†ê‚°à‚¢∑‚¢∏‚°Ö‚†å‚†®‚†ê‚¢∏‚£Ø‚°á‚†®‚††‚†ë‚¢∞‚†∂‚†¶‚¢ß‚°ä‚†Ñ‚†°‚†°‚¢∏‚£ó‚°á‚¢ê‚††‚†°‚¢®‚°∂‚†≤‚¢¶‚°Ö‚†°‚†Å‚†å‚¢∞‚£ó‚°á‚†Ç‚†å‚†Ñ‚°Å‚£ü‚†Ä‚†Ä‚°Ø‚††‚†Å‚†Ö‚¢∞‚°ó‚°á‚°Å‚°Ç‚†å‚†Ñ‚£ø‚¢∏‚°á‚†®‚†à‚†Ñ‚†Ö‚¢Ç‚¢ª‚£∞‚†è‚°Ä‚¢Ç‚¢Ç‚¢ê‚†ê‚¢∏ ',
  '‚†Ä‚°ß‚¢Å‚¢ê‚††‚¢Å‚†ê‚°ò‚£ø‚†Ü‚†®‚†à‚†å‚¢∏‚£ó‚°á‚††‚†°‚†®‚¢∏‚°á‚†Ä‚¢∏‚£Ü‚£®‚£†‚£°‚£∏‚£ó‚°á‚¢ê‚††‚¢Å‚¢∏‚°á‚†Ä‚¢∏‚†á‚°à‚†å‚£à‚£®‚£ó‚£á‚°®‚††‚†°‚†Ä‚£Ø‚†Ä‚†Ä‚°Ø‚††‚†Å‚†Ö‚†¢‚°Ø‚°á‚°ê‚††‚†®‚†Ä‚£ø‚¢∏‚°á‚†à‚†å‚°†‚¢Å‚†Ç‚†Ñ‚†ü‚°Ä‚°Ç‚¢Ç‚¢ê‚††‚¢à‚¢∏ ',
  '‚†Ä‚°è‚†Ñ‚¢Ç‚†ê‚†Ñ‚†°‚††‚¢π‚°É‚°Å‚†Ö‚†å‚¢∏‚£Ø‚°á‚†®‚††‚¢Å‚†∏‚†∂‚†¥‚¢¥‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†ê‚°ê‚¢ê‚¢∏‚°á‚†Ä‚¢∏‚†ß‚†í‚†â‚†à‚†∞‚£ó‚°á‚†à‚†â‚†í‚†•‚£ó‚†Ä‚†Ä‚°Ø‚††‚†Å‚†Ö‚°ò‚°Ø‚°á‚†Ñ‚†Ö‚†å‚†Ñ‚£ø‚¢∏‚°á‚†®‚†ê‚°Ä‚°Ç‚†å‚†Ñ‚†°‚†ê‚°Ä‚†¢‚†ê‚°ê‚†ê‚¢∏ ',
  '‚†Ä‚°Ø‚†ê‚°ê‚†à‚†å‚†®‚†ê‚††‚¢Å‚¢ê‚¢à‚¢ê‚¢∏‚°∑‚°á‚†®‚†ê‚°ê‚†à‚†Ñ‚°Ç‚¢Ω‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£á‚°∞‚†î‚†í‚¢∫‚°á‚†Ä‚¢∏‚°É‚†Ä‚†Ä‚†Ä‚¢ò‚£ó‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£Ø‚†Ä‚†Ä‚°ü‚†í‚†•‚†•‚£®‚°Ø‚°á‚†å‚†Ñ‚†Ö‚†Ç‚£ø‚¢∏‚°á‚†®‚†ê‚°Ä‚°Ç‚†å‚†Ñ‚†Ö‚°Å‚¢Ç‚¢Å‚†Ç‚°Ç‚†°‚¢∏ ',
  '‚†Ä‚°ß‚†Å‚†Ñ‚†Ö‚†°‚†®‚†à‚†å‚°Ä‚°Ç‚°ê‚††‚¢∏‚£ü‚°á‚††‚†°‚††‚¢Å‚£Å‚¢Ñ‚£ª‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚¢∏‚°Ö‚†Ä‚†Ä‚†Ä‚¢®‚£ó‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚°∑‚†Ä‚†Ä‚°ß‚†Ä‚†Ä‚†Ä‚†ê‚°Ø‚°è‚†í‚†¶‚¢Ö‚¢Ö‚£ø‚¢∏‚°á‚††‚¢Å‚†¢‚°ê‚†à‚†Ñ‚†°‚¢ê‚†ê‚°Ä‚°Ç‚¢Ç‚†°‚¢∏ ',
  '‚†Ä‚°è‚†Ñ‚†Ö‚†å‚¢®‚°Ç‚†°‚¢Å‚¢ê‚¢Ä‚†Ç‚†°‚¢∏‚°∑‚°á‚†®‚£Ä‚°•‚¢º‚°ã‚†â‚¢â‚£†‚£†‚£†‚£†‚£†‚°∏‚°á‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚¢∏‚†Ü‚†Ä‚†Ä‚†Ä‚†∞‚£ó‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£ü‚†Ä‚†Ä‚£á‚†Ä‚†Ä‚†Ä‚¢à‚°Ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚¢∏‚°ó‚†¨‚¢§‚£à‚£ß‚†Å‚†Ö‚°Å‚°Ç‚†Ç‚°Ç‚°ê‚¢ê‚†ê‚¢∏ ',
  '‚†Ä‚°Ø‚†Ä‚†Ö‚†å‚¢∏‚£ß‚†à‚†Ñ‚¢Ç‚†ê‚£à‚°å‚¢º‚£Ø‚°ó‚†â‚†Ä‚†Ä‚¢∏‚°É‚†Ä‚¢∏‚°Ç‚†Ä‚†Ä‚†Ä‚¢∏‚¢Ø‚°á‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚¢∏‚°É‚†Ä‚†Ä‚†Ä‚¢ò‚£ó‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£Ø‚†Ä‚¢Ä‚°á‚†Ä‚†Ä‚†Ä‚†ê‚°Ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚£ø‚°ó‚†±‚†∞‚¢Ñ‚°Ö‚£≤‚†ê‚¢ê‚†à‚¢∏ ',
  '‚†Ä‚°ß‚†Å‚†Ö‚†å‚£∏‚°ª‚°¶‚†ï‚†ä‚†â‚†Ä‚†Ä‚¢∏‚°∑‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢¶‚£º‚†Ç‚†Ä‚†Ä‚†Ä‚¢∏‚°Ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢¶‚£º‚†Ö‚†Ä‚†Ä‚†Ä‚¢®‚£ó‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£∑‚°¥‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†®‚°Ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚¢∏‚°á‚†Ä‚†Ä ‚°á‚¢∑‚†Ä‚†Ä‚†Ä‚¢®‚£ø‚†ë‚†í‚†¨‚£∏ ',
  '‚†Ä‚°∑‚†ä‚†ä‚†â‚¢∏‚°É‚¢∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°ü‚£á‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Å‚†Ä‚†Ä‚£†‚°¥‚†õ‚£á‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Å‚†Ä‚†Ä‚£†‚°¥‚†ì‚†ß‚£Ñ‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£®‚¢ó‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚¢∏‚†á‚†Ä‚†Ä‚†Ä‚°á‚†∏‚°á‚†Ä‚¢†‚°è‚£ø‚†Ä‚†Ä‚†Ä‚¢∏ ',
  '‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚¢∏‚†á‚†ò‚£á‚†Ä‚†Ä‚¢Ä‚°¥‚†û‚†Å‚†Ä‚†ô‚¢¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°¥‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†ô‚†¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°¥‚†û‚†Å‚†Ä‚†Ä‚†Ä‚†à‚†õ‚¢¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°¥‚†õ‚†Å‚†Ä‚†ô‚†≤‚£Ñ‚°Ä‚†Ä‚£ø‚†à‚†≥‚¢¶‚°Ä ‚°á‚†Ä‚¢ª‚°Ä‚°æ‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚¢∏ ',
  '‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚¢π‚£§‚†û‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†≥‚¢¶‚°¥‚†ö‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ì‚¢¶‚°§‚†û‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ì‚¢¶‚£§‚†û‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†∂‚£Ø‚†Ä‚†Ä‚†Ä‚†â‚†≥‚°á‚†Ä‚†à‚£ø‚†Å‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚¢∏ ',
  '‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†∏‚£á‚†Ä‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚¢∏ ',
  '‚†Ä‚°á‚†Ä‚£Ä‚£¥‚†ü‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ü‚°Ä‚†Ä‚†Ä‚¢∏ ',
  '‚¢∞‚£ß‚†æ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚¢¶‚£Ñ‚†∏‚£á',
  '‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ª‚£ø',
}

local function pretty_version()
  local v = vim.version()
  return { string.format('v%d.%d.%d%s', v.major, v.minor, v.patch, v.prerelease and ' dev' or '') }
end

local function python_venv()
  local venv = vim.env.VIRTUAL_ENV
  if venv ~= nil then
    return string.format('üêç VirtualEnv: %s', vim.fn.fnamemodify(venv, ':t'))
  end
  return ''
end

-- Taken mostly from alpha dashboard theme
local function button(sc, text, map, map_opts)
  local opts = {
    position = 'center',
    shortcut = sc,
    align_shortcut = 'right',
    cursor = 3,
    width = 40,
    hl = 'String',
    hl_shortcut = 'Constant',
  }
  sc = sc:gsub('%s', ''):gsub('LDR', '<Leader>')
  if map then
    map_opts = vim.tbl_extend('keep', map_opts or {}, { noremap = true, silent = true, nowait = true })
    opts.keymap = { 'n', sc, map, map_opts }
  end

  return {
    type = 'button',
    val = text,
    on_press = function()
      local key = vim.api.nvim_replace_termcodes(map or sc .. '<Ignore>', true, false, true)
      vim.api.nvim_feedkeys(key, 't', false)
    end,
    opts = opts,
  }
end

return {
  {
    'goolord/alpha-nvim',
    event = 'VimEnter',
    opts = function()
      local sections = {
        header = {
          type = 'group',
          val = {
            { type = 'text', val = logo, opts = { hl = 'Statement' } },
            { type = 'text', val = pretty_version, opts = { hl = 'Keyword' } },
          },
          opts = {
            spacing = 0,
            inherit = { position = 'center' },
          },
        },

        buttons = {
          type = 'group',
          val = {
            button('e', 'ÔÄñ  New File', '<Cmd>enew<CR>'),
            button('LDR f o', 'Ôë§  Recent Files'),
            button('LDR f f', 'ÔÉ∂  Find File'),
            button('LDR F', 'Ó™É  File Browser'),
            button('LDR LDR p', 'Ôñí  Projects'),
            button('LDR s g', 'Ô°à  Live Grep'),
            button('LDR h m', 'ÔÄ≠  Man Pages'),
            button('c', 'Ôê£  Neovim Config', format('<Cmd>e %s/init.lua<CR>', vim.fn.stdpath 'config')),
            button('l', 'Û∞í≤  Lazy', '<Cmd>Lazy<CR>'),
            button('m', 'üî® Mason', '<Cmd>Mason<CR>'),
          },
          opts = { spacing = 1 },
        },

        footer = {
          type = 'text',
          val = function()
            local stats = require('lazy').stats()
            local components = vim.tbl_filter(function(x)
              return x and #x > 0
            end, {
              format('üîå %d of %d Plugins', stats.loaded, stats.count),
              format('‚ö° Loaded in %dms', (math.floor(stats.startuptime * 100 + 0.5) / 100)),
              python_venv(),
            })
            return format('ÔÅì  %s  ÔÅî', table.concat(components, '  '))
          end,
          opts = { position = 'center', hl = 'Operator' },
        },
      }

      return {
        layout = {
          { type = 'padding', val = 2 },
          sections.header,
          { type = 'padding', val = 2 },
          sections.buttons,
          { type = 'padding', val = 2 },
          sections.footer,
        },
        opts = { margin = 5 },
      }
    end,
    config = function(_, opts)
      require('alpha').setup(opts)

      -- Redraw once Lazy stats are available
      vim.api.nvim_create_autocmd('User', {
        pattern = 'LazyVimStarted',
        callback = function()
          pcall(vim.cmd.AlphaRedraw)
        end,
      })
    end,
  },
}
