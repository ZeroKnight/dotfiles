snippet def "#define ..."
#define $1
endsnippet

snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/(\w+).*/$1/}
#define ${1:SYMBOL} ${2:value}
$0
#endif /* $1 */
endsnippet

snippet #if "#if .. #endif"
#if ${1:0}
${VISUAL}${0:${VISUAL/(.*)/(?1::code)/}}
#endif
endsnippet

# C/C++ agnostic. Will mimic the '.c*' extension as '.h*'
# Eg: foo.c -> foo.h, foo.cpp -> foo.hpp, foo.cxx -> foo.hxx, foo.cc -> foo.hh
snippet inc "#include local header"
#include "${1:`!v expand("%:t:r")`}.${2:`!p snip.rv = re.sub('c','h',re.sub(r'\w+\.','',snip.fn))`}"
endsnippet

snippet Inc "#include <foo>"
#include <${1:iostream}>
endsnippet

snippet guard "Header Guard" b
#ifndef ${2:PATH_}${1:`!p snip.rv = re.sub(r'[^A-Za-z0-9]+', '_', snip.fn).upper()`}_INCLUDED
#define $2$1_INCLUDED

$0

#endif /* #ifndef $2$1_INCLUDED */
endsnippet

snippet main "int main() { ... }"
int main(int argc, char *argv[])
{
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
	return 0;
}
endsnippet

snippet for "for loop"
for (${2:i} = 0; $2 < ${1:count}; ${3:$2++}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet fori "for loop with declared init"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:$2++}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet wh "while loop"
while(${1:/* condition */}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet do "do..while loop"
do {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
} while(${1:/* condition */});
endsnippet

snippet if "if ..."
if ($1) {
	${VISUAL}
}
endsnippet

snippet el "else ..."
else {
	${VISUAL}
}
endsnippet

snippet eli "else if ..."
else if ($1) {
	${VISUAL}
}
endsnippet

snippet ife "if .. else"
if ($1) {
	$2
} else {
	$3
}
endsnippet

snippet ifee "if..else if..else"
if ($1) {
	$2
} else if ($3) {
	$4
} else {
	$5
}

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:typename};
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
	${0:/* data */}
};
endsnippet

snippet tds "typedef struct ..."
typedef struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
	${0:/* data */}
} $1;
endsnippet

snippet fun "function definition" b
${1:void} ${2:function_name}(${3})
{
	${VISUAL}$0
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

snippet printf "printf ..."
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

# vim: ft=snippets
