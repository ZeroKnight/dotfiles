extends rst

priority 50

# Python snippets

global !p
from zeroknight.sniputils import *

def maybe_as(tabstop: int):
  return ' as ' if t[tabstop] and t[tabstop] != '\n' else ''

def write_function_docstring(args, rtype, snip):
  snip >> 1
  if args:
    snip.rv += '\n'
    snip += 'Parameters'
    snip += '----------'
    for arg in args:
      snip += f"{arg[0]} : {arg[1] if arg[1] is not None else 'TODO'}"
      snip >> 1
      snip += 'TODO: Description'
      snip << 1
  if rtype:
    snip.rv += '\n'
    snip += 'Returns'
    snip += '-------'
    snip += rtype
    snip >> 1
    snip += 'TODO: Description'
    snip << 1
  snip += '"""'
endglobal

snippet #! "shebang" bA
#!/usr/bin/env python${1:3}

$0
endsnippet

snippet "imp?" "import foo.bar (as bar)" rb
import ${1:sys}`!p snip.rv = maybe_as(2)`${2:foo}
endsnippet

snippet "fimp?" "from foo import bar" rb
from $1 import $2`!p snip.rv = maybe_as(3)`${3:foo}
endsnippet

snippet if "if ..." b
if $1:
	${2:${VISUAL:pass}}$0
endsnippet

snippet el "else ..." b
else:
	${2:${VISUAL:pass}}$0
endsnippet

snippet eli "elif" b
elif $1:
	${2:${VISUAL:pass}}$0
endsnippet

# ifn or elifn
snippet "(el)?ifn" "(el)if x is None ..." rb
`!p if match.group(1) is not None: snip.rv = 'el'`if $1 is None:
	${2:${VISUAL:pass}}$0
endsnippet

# ifnn or elifnn
snippet "(el)?ifnn" "(el)if x is not None ..." rb
`!p if match.group(1) is not None: snip.rv = 'el'`if $1 is not None:
	${2:${VISUAL:pass}}$0
endsnippet

snippet wh "while ..." b
while ${1:True}:
	${2:${VISUAL:pass}}$0
endsnippet

snippet for "for x in y ..." b
for ${1:_} in ${2:range(${3:10})}:
	${4:${VISUAL:pass}}$0
endsnippet

snippet try "try ... except" b
try:
	${2:${VISUAL:pass}}$3
except $1:
	$0
endsnippet

snippet except "except Exception as e ..." b
except $1`!p snip.rv = maybe_as(2)`${2:e}
	${3:${VISUAL:pass}}$0
endsnippet

snippet "fin?" "finally ..." rb
finally:
	${1:${VISUAL:pass}}$0
endsnippet

snippet with "with expr as foo ..." b
with ${1:expr}`!p snip.rv = maybe_as(2)`${2:var}:
	${3:${VISUAL:pass}}$0
endsnippet

snippet doc "Docstring" w
"""$1`!p close_docstring(t[1], snip, True)`
endsnippet

snippet def "def foo(...)" b
def ${1:function}(`!p snip.rv = 'self' + (', ' if t[2] else '')`${2:foo})${4: -> $3}:
	"""${5:Documentation for $1}`!p
args = get_args(t[2])
rtype = t[3]
if args or rtype:
  write_function_docstring(args, rtype, snip)
else:
  close_docstring(t[5], snip)`
	${6:${VISUAL:pass}}$0
endsnippet

snippet defs "@staticmethod ..." b
@staticmethod
def ${1:function}($2)${4: -> $3}:
	"""${5:Documentation for $1}`!p
args = get_args(t[2])
rtype = t[3]
if args or rtype:
  write_function_docstring(args, rtype, snip)
else:
  close_docstring(t[5], snip)`
	${6:${VISUAL:pass}}$0
endsnippet

snippet defc "@classmethod ..." b
@classmethod
def ${1:function}(`!p snip.rv = 'cls' + (', ' if t[2] else '')`${2:foo})${4: -> $3}:
	"""${5:Documentation for $1}`!p
args = get_args(t[2])
rtype = t[3]
if args or rtype:
  write_function_docstring(args, rtype, snip)
else:
  close_docstring(t[5], snip)`
	${6:${VISUAL:pass}}$0
endsnippet

# vim: ft=snippets ts=4
