# Generic, dialect-agnostic, generally ANSI-compliant SQL snippets.

# Slightly lower priority so that dialects may override
priority 40

global !p
from zeroknight.sniputils import *
endglobal

### Data Types

snippet ch "CHAR" w
CHAR($1)$0
endsnippet

snippet nch "NCHAR" w
NCHAR($1)$0
endsnippet

snippet vc "VARCHAR" w
VARCHAR($1)$0
endsnippet

snippet nvc "NVARCHAR" w
NVARCHAR($1)$0
endsnippet

snippet "(?i)\bint\b" "INTEGER" rA
INTEGER
endsnippet

snippet sint "SMALLINT" w
SMALLINT
endsnippet

snippet num "NUMERIC" w
NUMERIC(${1:p},${2:s})$0
endsnippet

# NUMERIC and DECIMAL are synonyms
snippet dec "DECIMAL" w
DECIMAL(${1:p},${2:s})$0
endsnippet

snippet fl "FLOAT" w
FLOAT(${1:n})$0
endsnippet

### Constraints

snippet "(?i)\bpk\b" "PRIMARY KEY" rA
PRIMARY KEY
endsnippet

snippet "(?i)\bfk\b" "FOREIGN KEY ... REFERENCES" rA
FOREIGN KEY ${1:foo} REFERENCES ${2:table}(${3:id})$0
endsnippet

snippet nn "NOT NULL" w
NOT NULL
endsnippet

snippet def "DEFAULT" w
DEFAULT $0
endsnippet

### DDL

snippet ct "CREATE TABLE" b
CREATE TABLE ${1:foo} (
	${2:id} INTEGER PRIMARY KEY,
	$0
);
endsnippet

snippet cta "CREATE TABLE AS ... SELECT" b
CREATE TABLE ${1:foo} AS
  SELECT ${2:*} FROM ${3:src}`!p if_ts(t[4], snip, '\nWHERE ')`${4:expr};$0
endsnippet

snippet ci "CREATE INDEX" b
CREATE INDEX ${1:foo}_idx
	ON ${2:table}(${3:col});$0
endsnippet

snippet cui "CREATE UNIQUE INDEX" b
CREATE UNIQUE INDEX ${1:foo}_idx
	ON ${2:table}(${3:col});$0
endsnippet

### DQL

snippet "(?i)sel(ect)?" "SELECT ... FROM" rw
SELECT ${1:*} FROM ${2:table}`!p if_ts(t[3], snip, '\nWHERE ')`${3:expr};$0
endsnippet

snippet "(?i)gr(oup)?" "GROUP BY" rw
GROUP BY ${1:cols}`!p if_ts(t[2], snip, '\nHAVING ')`${2:expr}
endsnippet

snippet "(?i)or(der)?" "ORDER BY" rw
ORDER BY ${1:expr}
endsnippet

### DML

post_jump "if snip.tabstop == 3: gen_list_of_tabstops(snip, len(get_csv(snip.tabstops[2].current_text)))"
snippet "(?i)ins(ert)?" "INSERT INTO" rb
INSERT INTO ${1:table} (${2:cols})
VALUES ($3);$0
endsnippet

snippet insv "INSERT INTO (implicit columns)" b
INSERT INTO ${1:table}
VALUES (${2:vals});$0
endsnippet

# TODO: accept number and generate SET lines
snippet "(?i)up(date)?" "UPDATE ... SET" rb
UPDATE ${1:table}
SET ${2:col} = ${3:expr}`!p if_ts(t[4], snip, '\nWHERE ')`${4:expr}
endsnippet

snippet "(?i)set" "SET col = expr" rw
SET ${1:col} = ${2:expr}
endsnippet

# vim: ft=snippets ts=4
