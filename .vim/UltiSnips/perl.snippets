priority -50

snippet #! "shebang" b
`!p snip.rv = '#!/usr/bin/env perl'`

$0
endsnippet

snippet usw "use strict; use warnings;" b
use strict;
use warnings;

$0
endsnippet

snippet usw5 "use v5.14; use strict; use warnings;" b
use v5.14;
use strict;
use warnings;

$0
endsnippet

snippet pack "package Foo::Bar ..." b
package ${1:`!v expand('%:.:gs?/?::?:h')`}::${2:`!v expand('%:t:r')`};

$0

1;
endsnippet

snippet exporter "use parent 'Exporter' ..." b
use parent 'Exporter';
our @EXPORT = qw($1);

$0
endsnippet

snippet moose "use Moose; ..." b
use Moose;
$0

no Moose;
__PACKAGE__->meta->make_immutable;
endsnippet

snippet if "if ..."
if ($1) {
    ${0:${VISUAL}}
}
endsnippet

snippet xif "if (one-line)"
${1:expr} if $2;
endsnippet

snippet el "else ..."
else {
    ${0:${VISUAL}}
}
endsnippet

snippet eli "elsif ..."
elsif ($1) {
    ${0:${VISUAL}}
}
endsnippet

snippet ife "if .. else"
if ($1) {
    $2
} else {
    $3
}
endsnippet

snippet ifee "if..elsif..else"
if ($1) {
    $2
} elsif ($3) {
    $4
} else {
    $5
}
endsnippet

snippet unless "unless"
unless ($1) {
    ${0:${VISUAL}}
}
endsnippet

snippet xunless "unless (one-line)"
${1:expr} unless $2;
endsnippet

snippet while "while"
while ($1) {
    ${0:${VISUAL}}
}
endsnippet

snippet xwhile "while (one-line)"
${1:expr} while $2;
endsnippet

snippet for "foreach"
foreach ${1:my $${2:i}} (${4:@${3:array}}) {
    ${0:${VISUAL}}
}
endsnippet

snippet xfor "foreach (one-line)"
${1:expr} foreach @${2:array};
endsnippet

snippet forc "for"
for (my $${1:var} = 0; $$1 < ${2:expr}; $$1++) {
    ${0:${VISUAL}}
}
endsnippet

snippet given "given"
given ($1) {
    ${0:${VISUAL}}
}
endsnippet

snippet when "when"
when ($1) {
    ${0:${VISUAL}}
}
endsnippet

snippet xwhen "when (one-line)"
${1:expr} when $2;
endsnippet

snippet sub "Subroutine (function)" b
sub ${1:sub_name} {
    my ${2/([^,])+(,)?.*/(?2:\()/}${2:\$foo}${2/([^,])+(,)?.*/(?2:\))/} = ${2/([^,])+(,)?.*/(?2:@_:shift)/};

    $0
}
endsnippet

snippet has "Moose attribute (has ...)"
has '${1:attr}' => (
    is  => '${2:rw}',
    isa => '${3:Any}',
    ${4:default => }$0
);
endsnippet

snippet method "Class method: sub foo { my $self = shift; ..." b
sub ${1:method_name} {
    my $self = shift;
    my ${2/([^,])+(,)?.*/(?2:\()/}${2:\$foo}${2/([^,])+(,)?.*/(?2:\))/} = ${2/([^,])+(,)?.*/(?2:@_:shift)/};

    $0
}
endsnippet

snippet slurp "slurp"
my $${1:var} = do { local $/ = undef; open my $fh, '<', ${2:$file}; <$fh> };
endsnippet

snippet inlist "unless grep { $_ eq $foo } @bar"
${1:unless} (grep { $_ eq $${2:foo} } ${3/(\S+)(\s)?/(?2:qw\(:@)/}${3:bar}${3/(\S+)(\s)?/(?2:\))/}) {
    $0
}
endsnippet

snippet xinlist "... unless grep { $_ eq $foo } @bar"
${1:unless} grep { $_ eq $${2:foo} } ${3/(\S+)(\s)?.*/(?2:qw\(:@)/}${3:bar}${3/(\S+)(\s)?.*/(?2:\);)/}
endsnippet

# vim:ft=snippets:
