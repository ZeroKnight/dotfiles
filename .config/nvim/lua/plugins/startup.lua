-- Startup Screen Configuration

local logo = {
  '‚†ô‚£è‚†©‚†â‚†ç‚†π‚£á‚†Ä‚¢∏‚°ã‚†©‚†â‚†ç‚¢π‚°á‚£†‚†û‚†â‚†ç‚†©‚†â‚†ç‚†©‚†â‚†ç‚°â‚†ª‚£§‚†Ä‚£†‚†û‚°â‚†ç‚†©‚†â‚†ç‚†©‚†â‚†ç‚°â‚†ª‚¢¶‚¢®‚°è‚¢â‚†ç‚†©‚†â‚£Ø‚†Ä‚†Ä‚°Ø‚†â‚†ç‚†©‚¢ô‚£ó‚°è‚†©‚†â‚†ç‚°â‚£ü‚¢ª‚°ç‚†©‚†â‚†ç‚†π‚£Ü‚†Ä‚†Ä‚†Ä‚£º‚†â‚†ç‚†©‚¢â‚¢π‚°è',
  '‚†Ä‚°ó‚††‚¢Å‚†ä‚†Ñ‚¢ª‚°Ñ‚¢∏‚°É‚†®‚†à‚†å‚¢∏‚£ü‚°á‚††‚†°‚†Å‚†Ö‚°Å‚†Ö‚†°‚†Å‚†Ö‚†Ñ‚†°‚¢∏‚£ü‚°á‚¢ê‚††‚†®‚†à‚†å‚°à‚†å‚†®‚†ê‚††‚†°‚¢∏‚£ó‚°á‚¢ê‚†à‚†Ñ‚†Ö‚°∑‚†Ä‚†Ä‚°Ø‚†à‚†å‚†®‚¢ê‚£ó‚°á‚†°‚¢Å‚†°‚†Ä‚£ø‚¢∏‚°á‚†à‚†å‚†®‚††‚†π‚°Ü‚†Ä‚£∏‚¢É‚†®‚¢à‚†®‚¢Ä‚¢∏ ',
  '‚†Ä‚°Ø‚†ê‚°ê‚¢à‚†ê‚°à‚¢∑‚¢∏‚°Ö‚†å‚†®‚†ê‚¢∏‚£Ø‚°á‚†®‚††‚†ë‚¢∞‚†∂‚†¶‚¢ß‚°ä‚†Ñ‚†°‚†°‚¢∏‚£ó‚°á‚¢ê‚††‚†°‚¢®‚°∂‚†≤‚¢¶‚°Ö‚†°‚†Å‚†å‚¢∞‚£ó‚°á‚†Ç‚†å‚†Ñ‚°Å‚£ü‚†Ä‚†Ä‚°Ø‚††‚†Å‚†Ö‚¢∞‚°ó‚°á‚°Å‚°Ç‚†å‚†Ñ‚£ø‚¢∏‚°á‚†®‚†à‚†Ñ‚†Ö‚¢Ç‚¢ª‚£∞‚†è‚°Ä‚¢Ç‚¢Ç‚¢ê‚†ê‚¢∏ ',
  '‚†Ä‚°ß‚¢Å‚¢ê‚††‚¢Å‚†ê‚°ò‚£ø‚†Ü‚†®‚†à‚†å‚¢∏‚£ó‚°á‚††‚†°‚†®‚¢∏‚°á‚†Ä‚¢∏‚£Ü‚£®‚£†‚£°‚£∏‚£ó‚°á‚¢ê‚††‚¢Å‚¢∏‚°á‚†Ä‚¢∏‚†á‚°à‚†å‚£à‚£®‚£ó‚£á‚°®‚††‚†°‚†Ä‚£Ø‚†Ä‚†Ä‚°Ø‚††‚†Å‚†Ö‚†¢‚°Ø‚°á‚°ê‚††‚†®‚†Ä‚£ø‚¢∏‚°á‚†à‚†å‚°†‚¢Å‚†Ç‚†Ñ‚†ü‚°Ä‚°Ç‚¢Ç‚¢ê‚††‚¢à‚¢∏ ',
  '‚†Ä‚°è‚†Ñ‚¢Ç‚†ê‚†Ñ‚†°‚††‚¢π‚°É‚°Å‚†Ö‚†å‚¢∏‚£Ø‚°á‚†®‚††‚¢Å‚†∏‚†∂‚†¥‚¢¥‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†ê‚°ê‚¢ê‚¢∏‚°á‚†Ä‚¢∏‚†ß‚†í‚†â‚†à‚†∞‚£ó‚°á‚†à‚†â‚†í‚†•‚£ó‚†Ä‚†Ä‚°Ø‚††‚†Å‚†Ö‚°ò‚°Ø‚°á‚†Ñ‚†Ö‚†å‚†Ñ‚£ø‚¢∏‚°á‚†®‚†ê‚°Ä‚°Ç‚†å‚†Ñ‚†°‚†ê‚°Ä‚†¢‚†ê‚°ê‚†ê‚¢∏ ',
  '‚†Ä‚°Ø‚†ê‚°ê‚†à‚†å‚†®‚†ê‚††‚¢Å‚¢ê‚¢à‚¢ê‚¢∏‚°∑‚°á‚†®‚†ê‚°ê‚†à‚†Ñ‚°Ç‚¢Ω‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£á‚°∞‚†î‚†í‚¢∫‚°á‚†Ä‚¢∏‚°É‚†Ä‚†Ä‚†Ä‚¢ò‚£ó‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£Ø‚†Ä‚†Ä‚°ü‚†í‚†•‚†•‚£®‚°Ø‚°á‚†å‚†Ñ‚†Ö‚†Ç‚£ø‚¢∏‚°á‚†®‚†ê‚°Ä‚°Ç‚†å‚†Ñ‚†Ö‚°Å‚¢Ç‚¢Å‚†Ç‚°Ç‚†°‚¢∏ ',
  '‚†Ä‚°ß‚†Å‚†Ñ‚†Ö‚†°‚†®‚†à‚†å‚°Ä‚°Ç‚°ê‚††‚¢∏‚£ü‚°á‚††‚†°‚††‚¢Å‚£Å‚¢Ñ‚£ª‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚¢∏‚°Ö‚†Ä‚†Ä‚†Ä‚¢®‚£ó‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚°∑‚†Ä‚†Ä‚°ß‚†Ä‚†Ä‚†Ä‚†ê‚°Ø‚°è‚†í‚†¶‚¢Ö‚¢Ö‚£ø‚¢∏‚°á‚††‚¢Å‚†¢‚°ê‚†à‚†Ñ‚†°‚¢ê‚†ê‚°Ä‚°Ç‚¢Ç‚†°‚¢∏ ',
  '‚†Ä‚°è‚†Ñ‚†Ö‚†å‚¢®‚°Ç‚†°‚¢Å‚¢ê‚¢Ä‚†Ç‚†°‚¢∏‚°∑‚°á‚†®‚£Ä‚°•‚¢º‚°ã‚†â‚¢â‚£†‚£†‚£†‚£†‚£†‚°∏‚°á‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚¢∏‚†Ü‚†Ä‚†Ä‚†Ä‚†∞‚£ó‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£ü‚†Ä‚†Ä‚£á‚†Ä‚†Ä‚†Ä‚¢à‚°Ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚¢∏‚°ó‚†¨‚¢§‚£à‚£ß‚†Å‚†Ö‚°Å‚°Ç‚†Ç‚°Ç‚°ê‚¢ê‚†ê‚¢∏ ',
  '‚†Ä‚°Ø‚†Ä‚†Ö‚†å‚¢∏‚£ß‚†à‚†Ñ‚¢Ç‚†ê‚£à‚°å‚¢º‚£Ø‚°ó‚†â‚†Ä‚†Ä‚¢∏‚°É‚†Ä‚¢∏‚°Ç‚†Ä‚†Ä‚†Ä‚¢∏‚¢Ø‚°á‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚¢∏‚°É‚†Ä‚†Ä‚†Ä‚¢ò‚£ó‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£Ø‚†Ä‚¢Ä‚°á‚†Ä‚†Ä‚†Ä‚†ê‚°Ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚£ø‚°ó‚†±‚†∞‚¢Ñ‚°Ö‚£≤‚†ê‚¢ê‚†à‚¢∏ ',
  '‚†Ä‚°ß‚†Å‚†Ö‚†å‚£∏‚°ª‚°¶‚†ï‚†ä‚†â‚†Ä‚†Ä‚¢∏‚°∑‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢¶‚£º‚†Ç‚†Ä‚†Ä‚†Ä‚¢∏‚°Ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢¶‚£º‚†Ö‚†Ä‚†Ä‚†Ä‚¢®‚£ó‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£∑‚°¥‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†®‚°Ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚¢∏‚°á‚†Ä‚†Ä ‚°á‚¢∑‚†Ä‚†Ä‚†Ä‚¢®‚£ø‚†ë‚†í‚†¨‚£∏ ',
  '‚†Ä‚°∑‚†ä‚†ä‚†â‚¢∏‚°É‚¢∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°ü‚£á‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Å‚†Ä‚†Ä‚£†‚°¥‚†õ‚£á‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Å‚†Ä‚†Ä‚£†‚°¥‚†ì‚†ß‚£Ñ‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£®‚¢ó‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚¢∏‚†á‚†Ä‚†Ä‚†Ä‚°á‚†∏‚°á‚†Ä‚¢†‚°è‚£ø‚†Ä‚†Ä‚†Ä‚¢∏ ',
  '‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚¢∏‚†á‚†ò‚£á‚†Ä‚†Ä‚¢Ä‚°¥‚†û‚†Å‚†Ä‚†ô‚¢¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°¥‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†ô‚†¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°¥‚†û‚†Å‚†Ä‚†Ä‚†Ä‚†à‚†õ‚¢¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°¥‚†õ‚†Å‚†Ä‚†ô‚†≤‚£Ñ‚°Ä‚†Ä‚£ø‚†à‚†≥‚¢¶‚°Ä ‚°á‚†Ä‚¢ª‚°Ä‚°æ‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚¢∏ ',
  '‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚¢π‚£§‚†û‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†≥‚¢¶‚°¥‚†ö‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ì‚¢¶‚°§‚†û‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ì‚¢¶‚£§‚†û‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†∂‚£Ø‚†Ä‚†Ä‚†Ä‚†â‚†≥‚°á‚†Ä‚†à‚£ø‚†Å‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚¢∏ ',
  '‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†∏‚£á‚†Ä‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚¢∏ ',
  '‚†Ä‚°á‚†Ä‚£Ä‚£¥‚†ü‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ü‚°Ä‚†Ä‚†Ä‚¢∏ ',
  '‚¢∞‚£ß‚†æ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚¢¶‚£Ñ‚†∏‚£á',
  '‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ª‚£ø',
}

local function pretty_version()
  local v = vim.version()
  return { string.format('v%d.%d.%d%s', v.major, v.minor, v.patch, v.prerelease and ' dev' or '') }
end

local function python_venv()
  local venv = vim.env.VIRTUAL_ENV
  if venv ~= nil then
    return string.format('üêç VirtualEnv: %s', vim.fn.fnamemodify(venv, ':t'))
  end
  return ''
end

vim.g.startup_bookmarks = {
  I = as_stdpath('config', 'init.lua'),
  L = as_stdpath('config', 'lua/plugins/lsp/init.lua'),
  L = as_stdpath('config', 'lua/plugins/lsp/servers/init.lua'),
}

local sections = {
  { 'header', 1 },
  { 'version', 0 },
  { 'bookmarks', 2 },
  { 'actions', 1 },
  { 'footer', 1 },
}

return {
  {
    'startup-nvim/startup.nvim',
    enabled = false, -- TODO: convert packer status to lazy
    opts = {
      header = {
        type = 'text',
        align = 'center',
        content = logo,
        highlight = 'Statement',
      },
      version = {
        type = 'text',
        align = 'center',
        content = pretty_version,
        highlight = 'Constant',
      },
      actions = {
        type = 'mapping',
        align = 'center',
        content = {
          { 'ÔÄñ  New File', "lua require'startup'.new_file()", '<C-n>' },
          { 'ÔÉ∂  Find File', 'Telescope find_files' },
          { 'Ôáâ  Find Git File', 'Telescope git_files' },
          { 'Ó™É  File Browser', 'Telescope file_browser' },
          { 'Ôë§  Recent Files', 'Telescope oldfiles' },
          { 'Ô°à  Live Grep', 'Telescope live_grep' },
        },
        highlight = 'String',
      },
      bookmarks = {
        type = 'text',
        align = 'center',
        fold_section = true,
        title = 'Bookmarks',
        content = function()
          local bookmarks = { '' }
          for key, file in pairs(vim.g.startup_bookmarks) do
            table.insert(bookmarks, string.format('[%s] %s', key, file))
          end
          return bookmarks
        end,
        highlight = 'String',
      },
      footer = {
        type = 'text',
        align = 'center',
        content = function()
          return {
            table.concat({
              string.format('üîå %d Plugins', vim.tbl_count(packer_plugins)),
              python_venv(),
            }, '  '),
          }
        end,
        highlight = 'Operator',
      },
      options = {
        mapping_keys = true,
        disable_statuslines = true,
        paddings = vim.tbl_map(function(x)
          return x[2]
        end, sections),
        after = function()
          local bookmarks = {}
          for key, file in pairs(vim.g.startup_bookmarks) do
            bookmarks[key] = string.format('<Cmd>e %s<CR>', file)
          end
          startup.create_mappings(vim.tbl_extend('error', {
            q = '<Cmd>qa<CR>',
          }, bookmarks))
          vim.opt_local.colorcolumn = ''
        end,
      },
      mappings = {
        open_file_split = '<C-s>',
      },
      parts = vim.tbl_map(function(x)
        return x[1]
      end, sections),
    },
  },
}
